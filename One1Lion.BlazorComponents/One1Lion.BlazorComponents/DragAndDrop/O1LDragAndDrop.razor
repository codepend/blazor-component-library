@typeparam TItem
@implements IDnDContainer<TItem>

<CascadingValue Value="DnDState" Name="State">
  <div class="draganddrop" ondragover="event.preventDefault();">
    <div class="draganddrop-header">
      <div class="draganddrop-title">
        <h3>Building up Drag and Drop</h3>
      </div>
    </div>
    <div class="draganddrop-body main-body">
      @if (Children is null) {
        <p>Loading...</p>
      } else {
        for (var i = 0; i < Children.Count; i++) {
          if (Children[i] is { }) {
            if (new[] { SeparatorDisplay.BeforeOnly, SeparatorDisplay.BeforeAndAfter }.Contains(SeparatorDisplay) && SeparatorTemplate is { }) {
              <O1LDragAndDropSeparator Item="Children[i]" SeparatorTemplate="SeparatorTemplate" Position="SeparatorPosition.Before" />
            }
            if (AllowNewItem && EditTemplate is { }) {
              <O1LDragAndDropTarget TItem="TItem"
                                AllowNewItem="AllowNewItem"
                                EditTemplate="EditTemplate"
                                IndexInParent="i"
                                Parent="this"
                                IsDropAfter="false" />
            } else {
              <O1LDragAndDropTarget TItem="TItem"
                                IndexInParent="i"
                                Parent="this"
                                IsDropAfter="false" />
            }
            var childProp = string.IsNullOrWhiteSpace(ChildrenPropertyName) ? null : Children[i].GetType().GetProperty(ChildrenPropertyName);
            if (childProp is { }) {
              <O1LDragAndDropGroup Children="(List<TItem>)childProp.GetValue(Children[i])"
                               ChildrenPropertyName="@ChildrenPropertyName"
                               AllowGrouping="AllowGrouping"
                               AllowNewItem="AllowNewItem"
                               DisplayTemplate="DisplayTemplate"
                               EditTemplate="EditTemplate"
                               SeparatorTemplate="SeparatorTemplate"
                               SeparatorDisplay="SeparatorDisplay"
                               Parent="this"
                               IndexInParent="i" />
            } else {
              <O1LDragAndDropItem Item="Children[i]"
                              AllowGrouping="AllowGrouping"
                              DisplayTemplate="DisplayTemplate"
                              EditTemplate="EditTemplate"
                              Parent="this"
                              IndexInParent="i" />
            }
            if (AllowNewItem && EditTemplate is { }) {
              <O1LDragAndDropTarget TItem="TItem"
                                AllowNewItem="AllowNewItem"
                                EditTemplate="EditTemplate"
                                IndexInParent="i + 1"
                                Parent="this"
                                IsDropAfter="true" />
            } else {
              <O1LDragAndDropTarget TItem="TItem"
                                IndexInParent="i + 1"
                                Parent="this"
                                IsDropAfter="true" />
            }
            if (new[] { SeparatorDisplay.AfterOnly, SeparatorDisplay.Between, SeparatorDisplay.BeforeAndAfter }.Contains(SeparatorDisplay) && SeparatorTemplate is { } && (SeparatorDisplay != SeparatorDisplay.Between || i < Children.Count - 1)) {
              <O1LDragAndDropSeparator Item="Children[i]" SeparatorTemplate="SeparatorTemplate" Position="SeparatorPosition.After" />
            }
          } else {
            // TODO: Handle null item
          }
        }
      }
    </div>
  </div>
</CascadingValue>

@code {
  [Parameter] public List<TItem> Children { get; set; }
  [Parameter] public string ChildrenPropertyName { get; set; }
  [Parameter] public bool AllowGrouping { get; set; }
  [Parameter] public bool AllowNewItem { get; set; }
  [Parameter] public SeparatorDisplay SeparatorDisplay { get; set; } = SeparatorDisplay.None;
  [Parameter] public Func<TItem> NewGroupMethod { get; set; }
  [Parameter] public Func<TItem, TItem> NewItemMethod { get; set; }
  [Parameter] public RenderFragment<TItem> DisplayTemplate { get; set; }
  [Parameter] public RenderFragment<TItem> EditTemplate { get; set; }
  [Parameter] public RenderFragment<TItem> SeparatorTemplate { get; set; }

  public DnDState<TItem> DnDState { get; set; } = new DnDState<TItem>();
  public string Id { get; } = Guid.NewGuid().ToString();
  public IDnDContainer<TItem> Parent { get; set; } = null;
  public int IndexInParent { get; set; } = -1;
  public string Address { get; private set; }

  protected override void OnInitialized() {
    DnDState.BaseContainer = this;
    DnDState.OnNotifyStateChanged += StateHasChanged;
    Address = Id;
  }

  protected override void OnParametersSet() {
    if (AllowGrouping) {
      if (NewGroupMethod is null) { throw new ArgumentNullException("When allowing grouping, the NewGroupMethod parameter must be specified."); }
      DnDState.NewGroupMethod = NewGroupMethod;
    }
    if (AllowNewItem) {
      if (NewItemMethod is null) { throw new ArgumentNullException("When allowing new items, the NewItemMethod parameter must be specified."); }
      DnDState.NewItemMethod = NewItemMethod;
    }
    DnDState.ChildrenPropertyName = ChildrenPropertyName;
  }
}
