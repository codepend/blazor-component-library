@typeparam TItem

<CascadingValue Value=DnDState Name="State">
  <div class="draganddrop-header">
    @if (DnDState.BaseContainer.GroupTitleTemplate is { }) {
      <DragAndDropTitle TItem="TItem" Parent="Parent" IndexInParent="IndexInParent">
        @DnDState.BaseContainer.GroupTitleTemplate(Model)
      </DragAndDropTitle>
    }
    @if (DnDState.BaseContainer.GroupControlBoxTemplate is { }) {
      <DragAndDropControlBox TItem="TItem" Parent="Parent" IndexInParent="IndexInParent">
        <DisplayContent>
          @DnDState.BaseContainer.GroupControlBoxTemplate(Model)
        </DisplayContent>
      </DragAndDropControlBox>
    }
  </div>
</CascadingValue>

@code {
  [CascadingParameter(Name = "State")]
  public DnDState<TItem> DnDState { get; set; }
  // DragAndDropHeaders are only allowed to be children of either the main DragAndDrop components
  //  or of a DragAndDropGroup
  [Parameter] public IDnDContainer<TItem> Parent { get; set; }
  [Parameter] public TItem Model { get; set; }
  [Parameter] public int IndexInParent { get; set; }

  public string Id { get; } = Guid.NewGuid().ToString();
  public string Address { get; private set; }

  protected override void OnParametersSet() {
    Address = $"{(Parent?.Address ?? Id)}.{IndexInParent}";
  }
}
