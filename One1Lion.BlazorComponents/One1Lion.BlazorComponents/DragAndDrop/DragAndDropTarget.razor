@typeparam TItem

@implements IDnDElement<TItem>

<CascadingValue Value=DnDState Name="State">
  @if (DnDState?.NewItemPayload is { } && DnDState.NewItemPayload.WrappingElement?.Id == Id) {
    @* if is drop after, then add a separator with the Item b...maybe *@
    <DragAndDropItem Parent="Parent"
                     Item="DnDState.NewItem"
                     IndexInParent="IndexInParent"
                     IsNewItem="true" />

  } else {
    <div class="draganddrop-target draganddrop-drop@(IsDropAfter ? "after" : "before") @(DnDState.Target?.WrappingElement?.Id == Id ? " drag-hover" : "")"
         @onclick="((e) => { if(DnDState.BaseContainer.AllowNewItem) DnDState.ShowNewItem(Parent, IndexInParent, this); })"
         @ondragenter="((e) => { DnDState.SetTarget(Parent, IndexInParent, this); StateHasChanged(); })"
         @ondragenter:stopPropagation="true"
         @ondrop="(() => DnDState.HandleDropPayload())"
         @ondrop:stopPropagation="true"></div>
  }
</CascadingValue>

@code {
  [CascadingParameter(Name = "State")] public DnDState<TItem> DnDState { get; set; } = new DnDState<TItem>();
  [Parameter] public bool IsDropAfter { get; set; }
  [Parameter] public IDnDContainer<TItem> Parent { get; set; }
  [Parameter] public int IndexInParent { get; set; }

  public string Id { get; } = Guid.NewGuid().ToString();
  public string Address { get; private set; }

  protected override void OnParametersSet() {
    Address = $"{(Parent?.Address ?? Id)}.{IndexInParent}";
  }
}
