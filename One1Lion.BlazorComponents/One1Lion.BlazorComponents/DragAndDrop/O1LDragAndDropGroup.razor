@typeparam TItem

@implements IDnDContainer<TItem>

<CascadingValue Value="DnDState" Name="State">
  <div class="draganddrop-container@(DnDState.Payload?.WrappingElement?.Id == Id ? " picked-up" : "")  @(DnDState.Target?.WrappingElement?.Id == Id ? " drag-hover" : "")"
       draggable="true"
       @ondragstart="(() => { DnDState.SetPayload(Parent, IndexInParent, this); StateHasChanged(); })"
       @ondragstart:stopPropagation="true"
       @ondragend="((e) => { DnDState.ClearPayload(); StateHasChanged(); })"
       @ondragend:stopPropagation="true"
       @ondrop="(() => DnDState.HandleDropPayload())"
       @ondrop:stopPropagation="true"
       @ondragenter="((e) => { DnDState.SetTarget(Parent, IndexInParent, this); StateHasChanged(); })"
       @ondragenter:stopPropagation="true">
    @* TODO: Header with title and control box *@
    <div class="draganddrop-body">
      @if (Children is null) {
        <p>Loading...</p>
      } else {
        for (var i = 0; i < Children.Count; i++) {
          if (Children[i] is { }) {
            if (new[] { SeparatorDisplay.BeforeOnly, SeparatorDisplay.BeforeAndAfter }.Contains(SeparatorDisplay) && SeparatorTemplate is { }) {
              <O1LDragAndDropSeparator Item="Children[i]" SeparatorTemplate="SeparatorTemplate" Position="SeparatorPosition.Before" />
            }
            if (AllowNewItem && EditTemplate is { }) {
              <O1LDragAndDropTarget TItem="TItem"
                                AllowNewItem="AllowNewItem"
                                EditTemplate="EditTemplate"
                                IndexInParent="i"
                                Parent="this"
                                IsDropAfter="false" />
            } else {
              <O1LDragAndDropTarget TItem="TItem"
                                IndexInParent="i"
                                Parent="this"
                                IsDropAfter="false" />
            }
            var childProp = string.IsNullOrWhiteSpace(ChildrenPropertyName) ? null : Children[i].GetType().GetProperty(ChildrenPropertyName);
            if (childProp is { }) {
              <O1LDragAndDropGroup Children="(List<TItem>)childProp.GetValue(Children[i])"
                               ChildrenPropertyName="@ChildrenPropertyName"
                               AllowGrouping="AllowGrouping"
                               AllowNewItem="AllowNewItem"
                               DisplayTemplate="DisplayTemplate"
                               EditTemplate="EditTemplate"
                               SeparatorTemplate="SeparatorTemplate"
                               SeparatorDisplay="SeparatorDisplay"
                               Parent="this"
                               IndexInParent="i" />
            } else {
              <O1LDragAndDropItem Item="Children[i]"
                              AllowGrouping="AllowGrouping"
                              DisplayTemplate="DisplayTemplate"
                              EditTemplate="EditTemplate"
                              Parent="this"
                              IndexInParent="i" />
            }
            if (AllowNewItem && EditTemplate is { }) {
              <O1LDragAndDropTarget TItem="TItem"
                                AllowNewItem="AllowNewItem"
                                EditTemplate="EditTemplate"
                                IndexInParent="i + 1"
                                Parent="this"
                                IsDropAfter="true" />
            } else {
              <O1LDragAndDropTarget TItem="TItem"
                                IndexInParent="i + 1"
                                Parent="this"
                                IsDropAfter="true" />
            }
            if (new[] { SeparatorDisplay.AfterOnly, SeparatorDisplay.Between, SeparatorDisplay.BeforeAndAfter }.Contains(SeparatorDisplay) && SeparatorTemplate is { } && (SeparatorDisplay != SeparatorDisplay.Between || i < Children.Count - 1)) {
              <O1LDragAndDropSeparator Item="Children[i]" SeparatorTemplate="SeparatorTemplate" Position="SeparatorPosition.After" />
            }
          } else {
            // TODO: Handle null item
          }
        }
      }
    </div>
  </div>
</CascadingValue>

@code {
  [CascadingParameter(Name = "State")] public DnDState<TItem> DnDState { get; set; } = new DnDState<TItem>();
  [Parameter] public List<TItem> Children { get; set; }
  [Parameter] public string ChildrenPropertyName { get; set; }
  [Parameter] public IDnDContainer<TItem> Parent { get; set; }
  [Parameter] public int IndexInParent { get; set; }
  [Parameter] public bool AllowGrouping { get; set; }
  [Parameter] public bool AllowNewItem { get; set; }
  [Parameter] public RenderFragment<TItem> DisplayTemplate { get; set; }
  [Parameter] public RenderFragment<TItem> EditTemplate { get; set; }
  [Parameter] public RenderFragment<TItem> SeparatorTemplate { get; set; }
  [Parameter] public SeparatorDisplay SeparatorDisplay { get; set; } = SeparatorDisplay.None;

  public string Id { get; } = Guid.NewGuid().ToString();
  public string Address { get; private set; }

  protected override void OnParametersSet() {
    Address = $"{(Parent?.Address ?? Id)}.{IndexInParent}";
  }
}
