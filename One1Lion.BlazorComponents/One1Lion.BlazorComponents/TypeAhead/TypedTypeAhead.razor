@typeparam TItem
@implements IDisposable
@using System.Net.Http
@using System.Timers
@using System.Text.RegularExpressions;

@*
  Adapted from: https://docs.microsoft.com/en-us/archive/msdn-magazine/2018/december/cutting-edge-blazor-custom-components
  as well as .NET Conf Focus On Blazor, Dan Roth's Welcome to Blazor: https://youtu.be/KlngrOF6RPw
*@

<div class="typeahead-container">
  <div class="input-group">
    <input type="text"
           id="typeaheadinput-@id"
           placeholder="Type a value..."
           class="form-control typeahead-input"
           disabled="@(Items is null)"
           @attributes="AdditionalAttributes"
           autocomplete="off"
           @bind="TypeAheadInput"
           @bind:event="oninput"
           @ref="TypeAheadInputBox"
           @onclick="HandleInputClicked"
           @onclick:stopPropagation="true"
           @onkeydown="HandleKeyPress"
           @onchange="_ => TrySelect(null)"
           @onfocusout="HandleBlur" />
    <div class="input-group-append@(!IsExpanded ? "" : " show")" @onkeypress="HandleKeyPress">
      <div class="suggest-list">
        @if (startsWithItems is null && containsItems is null && allOtherItems is null) {
          <span class="loading-msg">Loading...</span>
        } else {
          totalVisSelectItems = 0;
          var totLikelyMatches = (startsWithItems?.Count() ?? 0) + (containsItems?.Count() ?? 0);
          if (startsWithItems is { } && containsItems is { }) {
            <label class="dropdown-header">
              @totLikelyMatches likely match@(totLikelyMatches != 1 ? "es" : "")
            </label>
          }
          <div class="suggest-list-body" @onclick:stopPropagation="true">
            @if (startsWithItems is { } && startsWithItems.Count() > 0) {
              foreach (var item in startsWithItems) {
                var curItemIndex = totalVisSelectItems++;
                <a class="dropdown-item starts-with-item@(curItemIndex == curHoverIndex ? " pre-select" : "")" id="ta_@(curItemIndex)" @onclick="@(async () => await TrySelect(item))">
                  <span class="oi oi-star"></span> @((MarkupString)Boldify(item.MenuText))
                </a>
              }
            }
            @if (containsItems is { } && containsItems.Count() > 0) {
              if (startsWithItems is { } && startsWithItems.Count() > 0) {<hr /> }
              foreach (var item in containsItems) {
                var curItemIndex = totalVisSelectItems++;
                <a class="dropdown-item contains-item@(curItemIndex == curHoverIndex ? " pre-select" : "")" id="ta_@(curItemIndex)" @onclick="@(async () => await TrySelect(item))">
                  @((MarkupString)Boldify(item.MenuText))
                </a>
              }
            }
            @if (allOtherItems is { } && allOtherItems.Count() > 0) {
              if ((startsWithItems is { } && startsWithItems.Count() > 0) || (containsItems is { } && containsItems.Count() > 0)) {<hr /> }
              foreach (var item in allOtherItems) {
                var curItemIndex = totalVisSelectItems++;
                <a class="dropdown-item other-item@(curItemIndex == curHoverIndex ? " pre-select" : "")" id="ta_@(curItemIndex)" @onclick="@(async () => await TrySelect(item))">
                  @((MarkupString)item.MenuText)
                </a>
              }
            }
          </div>
        }
      </div>
    </div>
  </div>
  <button type="button"
          class="btn btn-sm btn-outline-secondary dropdown-toggle d-inline-block"
          @onclick="@(e => ToggleDropDown())"
          @onkeypress="HandleKeyPress"></button>
</div>

@code {
  [Parameter(CaptureUnmatchedValues = true)]
  public IDictionary<string, object> AdditionalAttributes { get; set; }
  [Parameter] public int Debounce { get; set; } = 300;
  [Parameter] public string SelectedText { get; set; }
  [Parameter] public string SelectedValue { get; set; }
  [Parameter] public bool SelectionOnly { get; set; }
  [Parameter] public bool LimitToList { get; set; }
  [Parameter] public EventCallback<string> SelectedTextChanged { get; set; }
  [Parameter] public EventCallback<string> SelectedValueChanged { get; set; }
  //[Parameter] public EventCallback<string> OnInputChanged { get; set; }
  [Parameter] public EventCallback<string> OnTryAutoComplete { get; set; }
  [Parameter] public EventCallback<TypeAheadItem<TItem>> OnSelectionMade { get; set; }
  [Parameter] public EventCallback<bool> OnDropDownVisibleChanged { get; set; }
  /// <summary>
  /// Invoked when the enter key is pressed.  The parameter indicates whether the
  /// suggestion list was visible when the enter key was pressed
  /// </summary>
  [Parameter] public EventCallback<bool> OnEnterKeyPressed { get; set; }
  [Parameter] public List<TypeAheadItem<TItem>> Items { get; set; }
  [Parameter] public bool CaseSensitive { get; set; }
  bool _IsExpanded;
  [Parameter]
  public bool IsExpanded {
    get {
      return _IsExpanded;
    }
    set {
      _IsExpanded = value;
      Task.Run(() => ReportDropDownVisibleChanged()).ConfigureAwait(false);
    }
  }
  [Parameter] public HttpClient HttpClient { get; set; }

  ElementReference TypeAheadInputBox;

  string id = Guid.NewGuid().ToString();
  List<TypeAheadItem<TItem>> startsWithItems { get; set; } = new List<TypeAheadItem<TItem>>();
  List<TypeAheadItem<TItem>> containsItems { get; set; } = new List<TypeAheadItem<TItem>>();
  List<TypeAheadItem<TItem>> allOtherItems { get; set; } = new List<TypeAheadItem<TItem>>() { new TypeAheadItem<TItem>() { DisplayText = "Loading...", MenuText = "Loading..." } };
  StringComparison strComp;

  int curHoverIndex;
  int totalVisSelectItems;

  enum ChangeDirection {
    Down = -1,
    Up = -2
  }

  Timer debounceTimer;
  string _TypeAheadInput;
  string TypeAheadInput {
    get => _TypeAheadInput;
    set {
      _TypeAheadInput = value;
      collapseListTimer.Stop();
      debounceTimer.Stop();
      debounceTimer.Start();
    }
  }

  Timer collapseListTimer;

  protected override void OnInitialized() {
    debounceTimer = new Timer() {
      Interval = Debounce,
      AutoReset = false
    };
    debounceTimer.Elapsed += HandleAutoComplete;
    collapseListTimer = new Timer() {
      Interval = 150,
      AutoReset = false
    };
    collapseListTimer.Elapsed += async (source, e) => await TrySelect(null);
    LimitToList = true;
    _TypeAheadInput = "Loading...";
  }

  bool typeAheadInputSet;
  protected override void OnParametersSet() {
    if (Items is { } && (string.IsNullOrWhiteSpace(_TypeAheadInput) || _TypeAheadInput == "Loading...") && !typeAheadInputSet) {
      if (!string.IsNullOrWhiteSpace(SelectedValue) && string.IsNullOrWhiteSpace(SelectedText)) {
        SelectedText = Items?.FirstOrDefault(i => i.Value == SelectedValue)?.DisplayText;
      } else if (!string.IsNullOrWhiteSpace(SelectedText) && string.IsNullOrWhiteSpace(SelectedValue)) {
        SelectedValue = Items?.FirstOrDefault(i => i.DisplayText == SelectedText)?.Value;
      }
      _TypeAheadInput = SelectedText;
      typeAheadInputSet = true;
    }
    strComp = CaseSensitive ? StringComparison.InvariantCulture : StringComparison.InvariantCultureIgnoreCase;
  }

  async void HandleAutoComplete(Object source, ElapsedEventArgs e) {
    await TryAutoComplete();
  }

  async Task TryAutoComplete() {
    collapseListTimer.Stop();
    curHoverIndex = 0;
    if (string.IsNullOrWhiteSpace(_TypeAheadInput)) {
      startsWithItems.Clear();
      await InvokeAsync(() => StateHasChanged());
      return;
    }

    if (OnTryAutoComplete.HasDelegate) {
      await OnTryAutoComplete.InvokeAsync(_TypeAheadInput);
    }
    if (string.IsNullOrWhiteSpace(_TypeAheadInput)) {
      return;
    }
    startsWithItems = Items.Where(i => i.MenuText.StartsWith(_TypeAheadInput, strComp)).ToList();
    containsItems = Items.Where(i => ((CaseSensitive && i.MenuText.Contains(_TypeAheadInput)) || (!CaseSensitive && i.MenuText.ToLower().Contains(_TypeAheadInput.ToLower()))) && !i.MenuText.StartsWith(_TypeAheadInput, strComp)).ToList();
    allOtherItems = new List<TypeAheadItem<TItem>>();

    await InvokeAsync(() => StateHasChanged());
  }

  async Task HandleKeyPress(KeyboardEventArgs e) {
    // TODO: Handle keypresses when the dropdown button or list have the focus
    // Look at https://docs.microsoft.com/en-us/aspnet/core/blazor/javascript-interop?view=aspnetcore-3.1
    //  for information on how to use the ElementReference TypeAheadInputBox to set focus or update text
    switch (e.Code) {
      case "ArrowDown":
        if (!IsExpanded) { ToggleDropDown(true); }
        ChangeSelection((int)ChangeDirection.Down);
        break;
      case "ArrowUp":
        ChangeSelection((int)ChangeDirection.Up);
        break;
      case "Escape":
        IsExpanded = false;
        curHoverIndex = 0;
        break;
      case "Enter":
      case "Tab":
        if (IsExpanded && curHoverIndex >= 0 && curHoverIndex <= totalVisSelectItems) {
          // Transform the index into the specific index for the right list:
          if (curHoverIndex < startsWithItems.Count) {
            await TrySelect(startsWithItems[curHoverIndex]);
          } else if (curHoverIndex - startsWithItems.Count < containsItems.Count) {
            var ind = curHoverIndex - startsWithItems.Count;
            await TrySelect(containsItems[ind]);
          } else if (curHoverIndex - startsWithItems.Count - containsItems.Count < allOtherItems.Count) {
            var ind = curHoverIndex - startsWithItems.Count - containsItems.Count;
            await TrySelect(allOtherItems[ind]);
          }
          if (OnEnterKeyPressed.HasDelegate && e.Code != "Tab") { await OnEnterKeyPressed.InvokeAsync(true); }
        } else if (e.Code == "Enter") {
          // Enter was pressed but an item was not pre-selected in the list, or the list is not showing
          if (OnEnterKeyPressed.HasDelegate) { await OnEnterKeyPressed.InvokeAsync(IsExpanded); }
        }
        break;
    }
  }

  void ChangeSelection(int which) {
    switch (which) {
      case (int)ChangeDirection.Down: // Move down
        curHoverIndex = curHoverIndex + 1;
        if (curHoverIndex >= totalVisSelectItems) { curHoverIndex = -1; }
        break;
      case (int)ChangeDirection.Up: // Move Up
        curHoverIndex = curHoverIndex - 1;
        if (curHoverIndex <= -2) { curHoverIndex = totalVisSelectItems; }
        break;
      default: // Select a specific ID by number
        curHoverIndex = Math.Max(Math.Min(which, totalVisSelectItems - 1), -1);
        break;
    }
  }

  public void ToggleDropDown(bool? overrideShow = default) {
    collapseListTimer.Stop();
    curHoverIndex = 0;
    if (string.IsNullOrWhiteSpace(_TypeAheadInput)) {
      startsWithItems = new List<TypeAheadItem<TItem>>();
      containsItems = new List<TypeAheadItem<TItem>>();
      allOtherItems = Items;
    } else {
      startsWithItems = Items.Where(i => i.MenuText.StartsWith(_TypeAheadInput, strComp)).ToList();
      containsItems = Items.Where(i => ((CaseSensitive && i.MenuText.Contains(_TypeAheadInput)) || (!CaseSensitive && i.MenuText.ToLower().Contains(_TypeAheadInput.ToLower()))) && !i.MenuText.StartsWith(_TypeAheadInput, strComp)).ToList();
      allOtherItems = Items.Where(i => !((CaseSensitive && i.MenuText.Contains(_TypeAheadInput)) || (!CaseSensitive && i.MenuText.ToLower().Contains(_TypeAheadInput.ToLower()))) && !i.MenuText.StartsWith(_TypeAheadInput, strComp)).ToList();
    }
    IsExpanded = overrideShow.HasValue ? overrideShow.Value : !IsExpanded;
  }

  string Boldify(string menuText) {
    if (!string.IsNullOrWhiteSpace(_TypeAheadInput)) {
      return Regex.Replace(menuText, @$"(?<myGroup>{_TypeAheadInput})", "<strong style=\"color:black;\">${myGroup}</strong>", strComp == StringComparison.InvariantCultureIgnoreCase ? RegexOptions.IgnoreCase : RegexOptions.None);
    }
    return menuText;
  }

  async Task TrySelect(TypeAheadItem<TItem> item) {
    collapseListTimer.Stop();
    IsExpanded = false;
    if (item is null && !string.IsNullOrWhiteSpace(_TypeAheadInput)) {
      if (LimitToList) {
        if (curHoverIndex > 0) {
          item = Items[curHoverIndex];
        } else {

          item = Items.FirstOrDefault(tai => tai.MenuText.StartsWith(_TypeAheadInput));
          if (item is null) {
            Items.FirstOrDefault(tai => tai.MenuText.Contains(_TypeAheadInput));
          }
        }
      } else {
        item = Items.FirstOrDefault(tai => tai.MenuText == _TypeAheadInput);

        if (item is null) {
          item = new TypeAheadItem<TItem>() {
            DisplayText = _TypeAheadInput,
            Value = _TypeAheadInput,
            MenuText = _TypeAheadInput
          };
        }
      }
      if (item is null) {
        _TypeAheadInput = null;
        return;
      }
    }
    curHoverIndex = 0;
    _TypeAheadInput = item?.DisplayText ?? "";
    SelectedValue = item?.Value ?? "";
    await OnSelectionMade.InvokeAsync(item);
    await InvokeAsync(() => StateHasChanged());
  }

  void HandleInputClicked(MouseEventArgs e) {
    IsExpanded = true;
    ToggleDropDown(true);
  }

  void HandleBlur() {
    // Set a timer to see if the user is clicking on an item in the dropdown,
    // or moving out of the control to another
    if (_IsExpanded) {
      collapseListTimer.Stop();
      collapseListTimer.Start();
    }
  }

  async Task ReportDropDownVisibleChanged() {
    if (OnDropDownVisibleChanged.HasDelegate) {
      await OnDropDownVisibleChanged.InvokeAsync(IsExpanded);
    }
  }

  public void Dispose() {
    if (debounceTimer is { }) { debounceTimer.Dispose(); }
    if (collapseListTimer is { }) { collapseListTimer.Dispose(); }
  }
}
