@typeparam TItem
@implements IDnDContainer<TItem>

<CascadingValue Value="DnDState" Name="State">
  <div class="draganddrop" ondragover="event.preventDefault();">
    <DragAndDropHeader TItem="TItem" Parent="this" IndexInParent="-1" />
    <div class="draganddrop-body main-body">
      @if (Children is null) {
        <p>Loading...</p>
      } else {
        if (Children.Count == 0) {
          if (AllowNewItem && EditTemplate is { }) {
            <DragAndDropTarget TItem="TItem"
                               IndexInParent="0"
                               Parent="this"
                               IsDropAfter="false" />
          } else {
            <DragAndDropTarget TItem="TItem"
                               IndexInParent="0"
                               Parent="this"
                               IsDropAfter="false" />
          }
        }
        ChildElements.Clear();
        for (var i = 0; i < Children.Count; i++) {
          if (Children[i] is { }) {
            if (new[] { SeparatorDisplay.BeforeOnly, SeparatorDisplay.BeforeAndAfter }.Contains(SeparatorDisplay) && SeparatorTemplate is { }) {
              <DragAndDropSeparator Item="Children[i]"
                                    Position="SeparatorPosition.Before"
                                    Parent="this"
                                    IndexInParent="i" />
            }
            if (AllowNewItem && EditTemplate is { }) {
              <DragAndDropTarget TItem="TItem"
                                 IndexInParent="i"
                                 Parent="this"
                                 IsDropAfter="false" />
            } else {
              <DragAndDropTarget TItem="TItem"
                                 IndexInParent="i"
                                 Parent="this"
                                 IsDropAfter="false" />
            }
            var childProp = string.IsNullOrWhiteSpace(ChildrenPropertyName) ? null : Children[i].GetType().GetProperty(ChildrenPropertyName);
            IDnDElement<TItem> newChild = null;
            if (childProp is { }) {
              <DragAndDropGroup Item="Children[i]"
                                Children="(List<TItem>)childProp.GetValue(Children[i])"
                                Parent="this"
                                IndexInParent="i"
                                @ref="newChild" />
            } else {
              <DragAndDropItem Item="Children[i]"
                               Parent="this"
                               IndexInParent="i"
                               @ref="newChild" />
            }
            if (newChild is { }) { ChildElements.Add(newChild); }
            if (AllowNewItem && EditTemplate is { }) {
              <DragAndDropTarget TItem="TItem"
                                 IndexInParent="i + 1"
                                 Parent="this"
                                 IsDropAfter="true" />
            } else {
              <DragAndDropTarget TItem="TItem"
                                 IndexInParent="i + 1"
                                 Parent="this"
                                 IsDropAfter="true" />
            }
            if (new[] { SeparatorDisplay.AfterOnly, SeparatorDisplay.Between, SeparatorDisplay.BeforeAndAfter }.Contains(SeparatorDisplay) && SeparatorTemplate is { } && (SeparatorDisplay != SeparatorDisplay.Between || i < Children.Count - 1)) {
              <DragAndDropSeparator Item="Children[i]"
                                    Position="SeparatorPosition.After"
                                    Parent="this"
                                    IndexInParent="i + 1" />
            }
          } else {
            // TODO: Handle null item
          }
        }
      }
    </div>
  </div>
</CascadingValue>

@code {
  [Parameter] public TItem Model { get; set; }
  [Parameter] public List<TItem> Children { get; set; }
  [Parameter] public string ChildrenPropertyName { get; set; }
  [Parameter] public bool AllowGrouping { get; set; }
  [Parameter] public bool AllowNewItem { get; set; }
  /// <summary>Whether or not to automatically ungroup Groups when they have only one child</summary>
  [Parameter] public bool AllowAutomaticUngroup { get; set; } = true;
  /// <summary>Whether or not to automatically delete Groups when they become empty</summary>
  [Parameter] public bool AllowAutomaticDeleteEmptyGroup { get; set; } = true;
  [Parameter] public SeparatorDisplay SeparatorDisplay { get; set; } = SeparatorDisplay.None;

  [Parameter] public Func<TItem> NewGroupMethod { get; set; }
  [Parameter] public Func<TItem, TItem> NewItemMethod { get; set; }

  [Parameter] public RenderFragment<DragAndDropItem<TItem>> DisplayTemplate { get; set; }
  [Parameter] public RenderFragment<DragAndDropItem<TItem>> EditTemplate { get; set; }
  [Parameter] public RenderFragment<DragAndDropSeparator<TItem>> SeparatorTemplate { get; set; }
  [Parameter] public RenderFragment<DragAndDropHeader<TItem>> MainTitle { get; set; }
  [Parameter] public RenderFragment<DragAndDropHeader<TItem>> MainControlBox { get; set; }
  [Parameter] public RenderFragment<DragAndDropHeader<TItem>> GroupTitleTemplate { get; set; }
  [Parameter] public RenderFragment<DragAndDropHeader<TItem>> GroupControlBoxTemplate { get; set; }
  [Parameter] public RenderFragment<DragAndDropItem<TItem>> ItemDisplayControlBoxTemplate { get; set; }
  [Parameter] public RenderFragment<DragAndDropItem<TItem>> ItemEditControlBoxTemplate { get; set; }

  [Parameter] public EventCallback OnItemSaveClicked { get; set; }
  [Parameter] public EventCallback OnItemCancelClicked { get; set; }
  [Parameter] public EventCallback OnItemEditClicked { get; set; }
  [Parameter] public EventCallback OnItemDeleteClicked { get; set; }

  [CascadingParameter(Name = "State")]
  public DnDState<TItem> DnDState { get; set; } = new DnDState<TItem>();

  public string Id { get; } = Guid.NewGuid().ToString();
  public IDnDContainer<TItem> Parent { get; set; } = null;
  public int IndexInParent { get; set; } = -1;
  public string Address { get; private set; }
  public List<IDnDElement<TItem>> ChildElements { get; private set; } = new List<IDnDElement<TItem>>();

  bool parmsLoaded;

  protected override void OnInitialized() {
    DnDState.BaseContainer = this;
    DnDState.OnNotifyStateChanged += StateHasChanged;
    Address = Id;
  }

  protected override void OnParametersSet() {
    if (Model is { }) {
      if (Children is { } && !parmsLoaded) {
        throw new ArgumentException("Expected either the Model parameter or the Children parameter, but not both.");
      } else if (string.IsNullOrWhiteSpace(ChildrenPropertyName)) {
        throw new ArgumentException("When using the Model parameter, you must also specify the ChildrenPropertyName parameter to indicate which property of the Model's type should be used as the list of Children.");
      }
      var childProp = Model.GetType().GetProperty(ChildrenPropertyName);
      if (childProp is null) {
        throw new ArgumentException($"The specified ChildrenPropertyName '{ChildrenPropertyName}' could not be found in the Model's type ({Model.GetType()})");
      }
      Children = childProp.GetValue(Model) as List<TItem>;
      parmsLoaded = true;
    }
  }
}
