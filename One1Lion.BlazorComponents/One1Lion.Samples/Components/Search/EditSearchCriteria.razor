@using One1Lion.BlazorComponents.TypeAhead
@using One1Lion.Samples.SharedLib.DbInfo
@using One1Lion.Samples.SharedLib.Search.DBExpressions
@using One1Lion.Samples.SharedLib.Search.QueryExpressions

<div class="queryparameter edit" @ondrag:stopPropagation="true">
  @if (Item is null) {
    <span>Loading...</span>
  } else {

    <TypeAhead Items="DbFieldTypeAheadItems"
               TItem="List<DbFieldViewModel>"
               LimitToList="true"
               OnSelectionMade="HandleFieldSelectionMade"
               SelectedDisplayText="@Item.QueryField"
               SelectedValue="@Item.QueryField"
               placeholder="Type or select a field" />
    @if (!string.IsNullOrWhiteSpace(Item.QueryField)) {
      <TypeAhead Items="ExprTypeTypeAheadItems"
                 TItem="ExpressionType"
                 LimitToList="true"
                 OnSelectionMade="HandleExpressionSelectionMade"
                 SelectedDisplayText="@ExpressionTypeDisplay.GetDisplayText(Item.ExpressionType)"
                 placeholder="Type or select an expression" />
      if (Item.ExpressionType != ExpressionType.NotSet) {
        var qf = QueryableFields.FirstOrDefault(qf => qf.QueryableFieldInfo.DisplayName == Item.QueryField || qf.DbField.FieldName == Item.QueryField);
        var fieldType = qf is null ? null : Type.GetType(qf.TypeName);
        if (fieldType is null) {
          fieldType = typeof(object);
        } else {
          fieldType = Nullable.GetUnderlyingType(fieldType) ?? fieldType;
        }
        TypeCode fieldTypeCode;
        try {
          fieldTypeCode = Type.GetTypeCode(fieldType);
        } catch {
          fieldTypeCode = TypeCode.Object;
        }
        if (qf?.QueryableFieldInfo?.IsLookup ?? false) {
          // TODO: Handle is lookup
          <span class="oi oi-list">Lookup Values Placeholder</span>
        } else {
          switch (fieldTypeCode) {
            case TypeCode.String:
              <input type="text" class="form-control" @bind-Value="inputString" @bind-Value:event="oninput" placeholder="Values" disabled="@(loading)" @onchange="@((e) => HandleEditValueChanged(e))" />
              break;
            case TypeCode.DateTime:
              <input type="date" class="form-control" @bind-Value="inputDate" @bind-Value:event="oninput" placeholder="MM/dd/yyyy" disabled="@(loading)" @onchange="@((e) => HandleEditValueChanged(e))" />
              break;
            case TypeCode.Byte:
            case TypeCode.Decimal:
            case TypeCode.Double:
            case TypeCode.Int16:
            case TypeCode.Int32:
            case TypeCode.Int64:
            case TypeCode.SByte:
            case TypeCode.Single:
            case TypeCode.UInt16:
            case TypeCode.UInt32:
            case TypeCode.UInt64:
              <input type="number" class="form-control" @bind-Value="inputNumber" @bind-Value:event="oninput" placeholder="Values" disabled="@(loading)" @onchange="@((e) => HandleEditValueChanged(e))" />
              break;
            case TypeCode.Boolean:
              <input type="checkbox" class="form-control" @bind-Value="inputBool" @bind-Value:event="oninput" disabled="@(loading)" @onchange="@((e) => HandleEditValueChanged(e))" />
              break;
          }

          if (Item.ExpressionType == ExpressionType.Between) {
            <span> and </span>
            switch (fieldTypeCode) {
              case TypeCode.String:
                <input type="text" class="form-control" @bind-Value="inputStringTo" @bind-Value:event="oninput" placeholder="Values" disabled="@(loading)" @onchange="@((e) => HandleEditValueChanged(e, false))" />
                break;
              case TypeCode.DateTime:
                <input type="date" class="form-control" @bind-Value="inputDateTo" @bind-Value:event="oninput" placeholder="MM/dd/yyyy" disabled="@(loading)" @onchange="@((e) => HandleEditValueChanged(e, false))" />
                break;
              case TypeCode.Byte:
              case TypeCode.Decimal:
              case TypeCode.Double:
              case TypeCode.Int16:
              case TypeCode.Int32:
              case TypeCode.Int64:
              case TypeCode.SByte:
              case TypeCode.Single:
              case TypeCode.UInt16:
              case TypeCode.UInt32:
              case TypeCode.UInt64:
                <input type="number" class="form-control" @bind-Value="inputNumberTo" @bind-Value:event="oninput" placeholder="Values" disabled="@(loading)" @onchange="@((e) => HandleEditValueChanged(e, false))" />
                break;
            }
          }
        }
      }
    }
  }
</div>

@code {
  [Parameter] public IDBExpressionItem Item { get; set; } = new DBExpressionItem();
  [Parameter] public List<DbFieldViewModel> QueryableFields { get; set; }

  bool loading = true;

  bool inputBool;

  string inputString;
  DateTime inputDate;
  double inputNumber;

  string inputStringTo;
  DateTime inputDateTo;
  double inputNumberTo;

  List<ExpressionType> ExpressionTypes = new List<ExpressionType>();
  List<TypeAheadItem<List<DbFieldViewModel>>> DbFieldTypeAheadItems = new List<TypeAheadItem<List<DbFieldViewModel>>>();
  List<TypeAheadItem<ExpressionType>> ExprTypeTypeAheadItems = new List<TypeAheadItem<ExpressionType>>();

  protected override void OnParametersSet() {
    loading = QueryableFields is null;
    if (QueryableFields is { }) {
      // Since we have asked specifically for fields that are queryable, the QueryableFieldInfo object will not be null
      DbFieldTypeAheadItems = QueryableFields.GroupBy(qf => new {
        qf.QueryableFieldInfo.DisplayName
      }).Select(qfg => new TypeAheadItem<List<DbFieldViewModel>>() {
        MenuText = qfg.Key.DisplayName,
        DisplayText = qfg.Key.DisplayName,
        Value = qfg.Key.DisplayName.ToString(),
        Item = qfg.ToList()
      }).Distinct().OrderBy(ta => ta.DisplayText).ToList();
    }
    if (!string.IsNullOrWhiteSpace(Item?.QueryField)) {
      // Pre-populate the expression types for this field
      ExpressionTypes = ExpressionTypeDisplay.GetExpressionTypes(QueryableFields.FirstOrDefault(qf => qf.QueryableFieldInfo.DisplayName == Item.QueryField || qf.DbField.FieldName == Item.QueryField)?.TypeName).Where(et => et != ExpressionType.NotSet).ToList();
      // TODO: also perform any operations that have to do with the selected expression type
      if (Item.Values != null && Item.Values.Count() > 0) {
        inputString = Item.Values[0].ToString();
        bool.TryParse(inputString, out inputBool);
        DateTime.TryParse(inputString, out inputDate);
        double.TryParse(inputString, out inputNumber);
        if (Item.Values.Count() > 1) {
          inputStringTo = Item.Values[1].ToString();
          DateTime.TryParse(inputStringTo, out inputDateTo);
          double.TryParse(inputStringTo, out inputNumberTo);
        }
      }
    }
  }

  void HandleEditValueChanged(ChangeEventArgs e, bool firstVal = true) {
    if (Item.Values is null) {
      Item.Values = new List<object>() { null };
    }

    if (!firstVal) {
      if (Item.Values.Count == 1) {
        Item.Values.Add(e.Value);
      } else {
        Item.Values[1] = e.Value;
      }
    } else {
      Item.Values[0] = e.Value;
    }
  }

  void HandleFieldSelectionMade(TypeAheadItem<List<DbFieldViewModel>> selectedItem) {
    var qf = selectedItem.Item;
    Item.QueryField = qf.First().QueryableFieldInfo.DisplayName;
    if (!string.IsNullOrWhiteSpace(Item.QueryField)) {
      ExpressionTypes = ExpressionTypeDisplay.GetExpressionTypes(qf.First().TypeName).Where(et => et != ExpressionType.NotSet).ToList();
    } else {
      ExpressionTypes = new List<ExpressionType>();
    }
    if (!ExpressionTypes.Contains(Item.ExpressionType)) { Item.ExpressionType = ExpressionType.NotSet; }
    if (ExpressionTypes is { }) {
      ExprTypeTypeAheadItems = ExpressionTypes.Select(et => new TypeAheadItem<ExpressionType>() {
        MenuText = ExpressionTypeDisplay.GetDisplayText(et),
        DisplayText = ExpressionTypeDisplay.GetDisplayText(et),
        Value = et.ToString(),
        Item = et
      }).ToList();
    }
  }

  void HandleExpressionSelectionMade(TypeAheadItem<ExpressionType> selectedItem) {
    Item.ExpressionType = selectedItem.Item;
  }
}
