@using One1Lion.BlazorComponents.DragAndDrop
@using One1Lion.BlazorComponents.DragAndDrop.Lib
@using One1Lion.Samples.Components.Search
@using One1Lion.Samples.Data
@using One1Lion.Samples.SharedLib.DbInfo
@using One1Lion.Samples.SharedLib.Search.QueryExpressions
@using One1Lion.Samples.SharedLib.Search.DBExpressions

@inject HttpClient httpClient

@implements IDisposable

<h3>Drag And Drop Query Builder</h3>
<CascadingValue Value=dndState Name="State">
  <DragAndDrop Children="baseGroup.Children as List<IQueryElement>"
               ChildrenPropertyName="@nameof(IQueryExpressionGroup.Children)"
               AllowGrouping="true"
               NewGroupMethod="QueryExpressionGroup.NewGroup"
               AllowNewItem="true"
               NewItemMethod="QueryExpressionGroup.NewItem"
               SeparatorDisplay="SeparatorDisplay.Between">
    <DisplayTemplate Context="curItem">
      <SearchCriteria Item="curItem as IQueryExpressionItem" EditMode="false" QueryableFields="dbFields" />
    </DisplayTemplate>
    <EditTemplate Context="curItem">
      <SearchCriteria Item="curItem as IQueryExpressionItem" EditMode="true" QueryableFields="dbFields" />
    </EditTemplate>
    <SeparatorTemplate Context="curItem">
      <div class="and-or-toggle" onselect="preventDefault();">
        <div class="@(curItem.AndWithNext ? "selected" : "")"
             onselect="preventDefault();"
             @onclick="(async (e) => { if (!curItem.AndWithNext) {curItem.AndWithNext = !curItem.AndWithNext; } })">
          And
        </div>
        <div class="@(curItem.AndWithNext ? "" : "selected")"
             onselect="preventDefault();"
             @onclick="(async (e) => { if (curItem.AndWithNext) { curItem.AndWithNext = !curItem.AndWithNext; } })">
          Or
        </div>
      </div>
    </SeparatorTemplate>
  </DragAndDrop>
</CascadingValue>

<h4>Live output</h4>
<p>@baseGroup.FormattedDisplay()</p>

@code {
  IQueryExpressionGroup baseGroup = new QueryExpressionGroup();
  DnDState<IQueryElement> dndState = new DnDState<IQueryElement>();
  List<DbFieldViewModel> dbFields { get; set; } = new List<DbFieldViewModel>();

  protected override async Task OnInitializedAsync() {
    baseGroup = QueryDataSampleGenerator.GenerateQueryExpressionGroup();
    dbFields = await QueryDataSampleGenerator.GenerateQueryableFields(httpClient);
    dndState.OnNotifyStateChanged += StateHasChanged;
  }

  async Task ToggleAndOr(MouseEventArgs e, IQueryElement curElem) {
    curElem.AndWithNext = !curElem.AndWithNext;
    await InvokeAsync(() => StateHasChanged());
  }

  void IDisposable.Dispose() {
    dndState.OnNotifyStateChanged -= StateHasChanged;
  }
}
