@using One1Lion.BlazorComponents.DragAndDrop
@using One1Lion.BlazorComponents.DragAndDrop.Lib
@using One1Lion.Samples.Components.Search
@using One1Lion.Samples.Data
@using One1Lion.Samples.SharedLib.DbInfo
@using One1Lion.Samples.SharedLib.Search.QueryExpressions
@using One1Lion.Samples.SharedLib.Search.FileRepositoryExpressions

@inject HttpClient httpClient

@implements IDisposable

<h3>Drag And Drop Query Builder</h3>
@if (baseGroup is null) {
  <p>Loading...</p>
} else {
  <CascadingValue Value=dndState Name="State">
    <DragAndDrop Children="baseGroup.Children as List<IQueryElement>"
                 ChildrenPropertyName="@nameof(IQueryExpressionGroup.Children)"
                 AllowGrouping="true"
                 NewGroupMethod="QueryExpressionGroup.NewGroup"
                 AllowNewItem="true"
                 NewItemMethod="QueryExpressionGroup.NewItem"
                 SeparatorDisplay="SeparatorDisplay.Between">
      <MainTitle>
        <h3>Search Criteria</h3>
      </MainTitle>
      <MainControlBox>
        <button type="button" class="oi oi-aperture" title="Reset"></button>
      </MainControlBox>
      <GroupTitleTemplate Context="curGroup">
        @{
          var groupType = curGroup?.GetType();
          if (groupType is { } && groupType.GetInterface(nameof(IFileRepositoryExpressionGroup)) is { }) {
            <h3>File Repository</h3>
          } else {
            <h3>SQL Search </h3>
          }
        }
      </GroupTitleTemplate>
      <GroupControlBoxTemplate Context="curGroup">
        @*// TODO: Check if it is a IDBExpressionGroup or IFileRepositoryExpressionGroup*@
        <button type="button" class="oi oi-aperture" title="Reset"></button>
        <button type="button" class="oi oi-fullscreen-enter" title="Expand"></button>
        <button type="button" class="oi oi-x text-danger" title="Remove"></button>
      </GroupControlBoxTemplate>
      <ItemDisplayControlBoxTemplate Context="curItem">
        <button type="button" class="oi oi-pencil text-warning" title="Edit"></button>
        <button type="button" class="oi oi-x text-danger" title="Delete"></button>
      </ItemDisplayControlBoxTemplate>
      <ItemEditControlBoxTemplate Context="curItem">
        <button type="button" class="oi oi-check text-success" title="Save"></button>
        <button type="button" class="oi oi-trash text-danger" title="Cancel"></button>
      </ItemEditControlBoxTemplate>
      <DisplayTemplate Context="curItem">
        <SearchCriteria Item="curItem.Item as IQueryExpressionItem" EditMode="false" QueryableFields="dbFields" />
      </DisplayTemplate>
      <EditTemplate Context="curItem">
        <SearchCriteria Item="curItem.EditItem as IQueryExpressionItem" EditMode="true" QueryableFields="dbFields" />
      </EditTemplate>
      <SeparatorTemplate Context="curItem">
        <AndOrDisplay Item="curItem.Item" OnChange="((b) => StateHasChanged())" />
      </SeparatorTemplate>
    </DragAndDrop>
  </CascadingValue>
}

<h4>Live output</h4>
<p>@baseGroup.FormattedDisplay()</p>

@code {
  IQueryExpressionGroup baseGroup = new QueryExpressionGroup();
  DnDState<IQueryElement> dndState = new DnDState<IQueryElement>();
  List<DbFieldViewModel> dbFields { get; set; } = new List<DbFieldViewModel>();

  protected override async Task OnInitializedAsync() {
    baseGroup = QueryDataSampleGenerator.GenerateQueryExpressionGroup();
    dbFields = await QueryDataSampleGenerator.GenerateQueryableFields(httpClient);
    dndState.OnNotifyStateChanged += StateHasChanged;
  }

  async Task ToggleAndOr(MouseEventArgs e, IQueryElement curElem) {
    curElem.AndWithNext = !curElem.AndWithNext;
    await InvokeAsync(() => StateHasChanged());
  }

  void IDisposable.Dispose() {
    dndState.OnNotifyStateChanged -= StateHasChanged;
  }
}
